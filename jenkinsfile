pipeline {
    agent any
    environment {
        registry = "public.ecr.aws/u7z2y9i0/petdemo:latest"
    }
   
    stages {
        stage('Cloning Git') {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: '*/main']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: '', url: 'https://github.com/Shraddha2457/spring-petclinic.git']]])     
            }
        }
      stage ('Build') {
          steps {
            script {
                sh './mvnw clean package -Dmaven.test.skip=true'
            }           
        }
      }
    // Building Docker images
    stage('Building image') {
      steps{
        script {
          sh 'docker build -t petdemo .'
          sh 'docker tag petdemo:latest public.ecr.aws/u7z2y9i0/petdemo:latest'
        }
      }
    }
   
    // Uploading Docker images into AWS ECR
    stage('Pushing to ECR') {
     steps{  
         script {
                sh 'aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws/x9t5d3j0'
                sh 'docker push public.ecr.aws/u7z2y9i0/petdemo:latest'
         }
        }
      }

       stage('K8S Deploy') {
        steps{   
            script {
                withKubeCredentials(kubectlCredentials: [[caCertificate: '', clusterName: 'EKS-1', contextName: '', credentialsId: 'k8-token', namespace: 'webapps', serverUrl: 'https://5B7DD3FA037CB5EF3D2423244FC6335E.sk1.ap-south-1.eks.amazonaws.com']]) {
                    sh "kubectl apply -f eks-deploy-k8s.yaml"
                    sleep60
                     sh "kubectl get svc -n webapps"
                }
            }
        }
       }
    }
}
